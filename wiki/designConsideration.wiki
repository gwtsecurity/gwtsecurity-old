#summary Design consideration

= Introduction =
[http://static.springsource.org/spring-security/site/ Spring Security ] always require a login entry, 
In Gwt, you have two choices, 
  # provide a stand alone login page, 
  # handle by gwt itself 

Gwtsecurity detect Sprign Security exception event, when security exception occurs, <br/>
gwtsecury distinguish whether request offer by RemoteService or not.<br/>
If true, gwtsecurity direct report [http://code.google.com/p/gwtsecurity/source/browse/trunk/gwtsecurity/src/main/java/com/gwt/ss/client/GwtSecurityException.java GwtSecurityException] to front end gwt app,
 <br/>otherwise gwtsecurity bypass to spring's mechanism.


= Details =
Gwtsecurity propose two type [http://code.google.com/p/gwtsecurity/source/browse/trunk/gwtsecurity/src/main/java/com/gwt/ss/client/GwtSecurityException.java GwtSecurityException].
|| [http://code.google.com/p/gwtsecurity/source/browse/trunk/gwtsecurity/src/main/java/com/gwt/ss/client/GwtAuthenticationException.java GwtAuthenticationException] || means user not yet authenticated.<br>, gwt app has duty to provide a login entry for user singin. ||
|| [http://code.google.com/p/gwtsecurity/source/browse/trunk/gwtsecurity/src/main/java/com/gwt/ss/client/GwtAccessDeniedException.java GwtAccessDeniedException] || means user has not enough authority to acess then resource.<br/>user should get a wraning this time. ||

The demo app, I intent to handle security exception by gwt app itself.
[http://sites.google.com/site/gwtmemo/gssdemoSimpleLogin.png]

I configure login like this
{{{
   <form-login always-use-default-target="true" 
                             default-target-url="/loginSuccess.jsp" 
                             authentication-failure-url="/loginFail.jsp"/>
}}}
Because I use [http://google-web-toolkit.googlecode.com/svn/javadoc/2.2/com/google/gwt/http/client/RequestBuilder.html RequestBuilder] to login
{{{
  RequestBuilder builder = new RequestBuilder(RequestBuilder.POST, 
          URL.encode(GWT.getHostPageBaseURL()+getLoginUrl()));
  builder.setHeader("Content-Type", "application/x-www-form-urlencoded");
  String query = "j_username=" + userName + "&j_password=" + password;
  builder.setRequestData(query);
  builder.setCallback(new RequestCallback() {

      @Override
      public void onResponseReceived(Request request, Response response) {
          /*Must return Success when login success*/
          if ("Success".equals(response.getText())) {
              hide();
          } else {
            //fail notify
          }
      }

      @Override
      public void onError(Request request, Throwable exception) {
          //fail notify
      }
  });
}}}
I need spring return "Success" message when user login success.<br/>
So I define "always-use-default-target=true" let sprnig always redirect to "default-target-url"<br/>
when user is certificated. and return error message from "authentication-failure-url" when authenticated failed.

Alternative approach, you can activate [http://code.google.com/webtoolkit/doc/latest/DevGuideCodingBasicsHistory.html history] management and direct return to the original access path when user is authenticated.